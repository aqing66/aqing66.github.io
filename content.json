{"meta":{"title":"阿清的博客","subtitle":"白驹过隙","description":"珍惜时间！","author":"阿清","url":"http://yoursite.com","root":"/"},"pages":[{"title":"分类","date":"2020-07-09T08:16:56.000Z","updated":"2020-07-09T13:09:16.176Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"schedule","date":"2020-07-12T08:16:50.000Z","updated":"2020-07-12T08:16:50.054Z","comments":true,"path":"schedule/index.html","permalink":"http://yoursite.com/schedule/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-07-09T08:17:06.000Z","updated":"2020-07-09T13:07:17.744Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"java复习（2）","slug":"java复习（2）","date":"2020-07-29T07:30:21.000Z","updated":"2020-07-30T11:13:38.374Z","comments":true,"path":"post/1335013d.html","link":"","permalink":"http://yoursite.com/post/1335013d.html","excerpt":"Java面向对象的进一步学习，Java的封装、继承、多态的主要学习","text":"Java面向对象的进一步学习，Java的封装、继承、多态的主要学习 继承继承让我们更加容易实现类的扩展。 比如，我们定义了人类类，再定义Boy类就只需要扩展人类即可。实现了代码的重用，不用再重新发明轮子(don’t reinvent wheels)。 继承使用要点： 1.父类也称作超类、基类、派生类等。2.Java中只有单继承，没有像C++那样的多继承。多继承会引起混乱，使得继承链过于复杂，系统难于维护。3.Java中类没有多继承，接口有多继承。4.子类继承父类，可以得到父类的全部属性和方法 (除了父类的构造方法)，但不见得可以直接访问(比如，父类私有的属性和方法)。5.如果定义一个类时，没有调用extends，则它的父类是：java.lang.Object。 方法重写与重载 方法重写：子类通过重写父类的方法，可以用自身的行为替换父类的行为。方法的重写是实现多态的必要条件。（即对父类的方法重新写） 方法的重写需要符合下面的三个要点：(无须在意) 1.“==”： 方法名、形参列表相同。2.“≤”：返回值类型和声明异常类型，子类小于等于父类。3.“≥”： 访问权限，子类大于等于父类2. 方法重载：在同一个类中允许同时存在一个以上的同名方法,只要这些方法的参数个数或类型不同即可。 重载的规则: 必须具有不同的参数列表。 可以有不同的返回类型,只要参数列表不同就可以了。 toString方法和equals方法tostring方法默认的tostring是继承object的方法，对该对象的地址打印“类名+@+16进制的hashcode”当然也可以对该方法进行重写 123public String toString() &#123; return getClass().getName() + \"@\" + Integer.toHexString(hashCode());&#125; equals与==equals：在string里是比较内容是否相等，在object类里未重写是比较地址与==相同含义==：代表比较双方是否相同。如果是基本类型则表示值相等，如果是引用类型则表示地址相等即是同一个对象。 继承树追溯 属性/方法查找顺序：(比如：查找变量h) 1.查找当前类中有没有属性h2.依次上溯每个父类，查看每个父类中是否有h，直到Object3.如果没找到，则出现编译错误。4.上面步骤，只要找到h变量，则这个过程终止。 构造方法调用顺序： 构造方法第一句总是：super(…)来调用父类对应的构造方法。所以，流程就是：先向上追溯到Object，然后再依次向下执行类的初始化块和构造方法，直到当前子类为止。 注：静态初始化块调用顺序，与构造方法调用顺序一样. 封装的作用和含义 编程中封装的具体优点： 1.提高代码的安全性。2.提高代码的复用性。3.“高内聚”：封装细节，便于修改内部代码，提高可维护性。4.“低耦合”：简化外部调用，便于调用者使用，便于扩展和协作。 访问控制符 1.private 表示私有，只有自己类能访问2.default表示没有修饰符修饰，只有同一个包的类能访问3.protected表示可以被同一个包的类以及其他包中的子类访问4.public表示可以被该项目的所有包中的所有类访问 封装类属性处理 1.一般使用private访问权限。2.提供相应的get/set方法来访问相关属性，这些方法通常是public修饰的，以提供对属性的赋值与读取操作(注意：boolean变量的get方法是is开头!)。3.一些只用于本类的辅助性方法可以用private修饰，希望其他类调用的方法用public修饰。 多态多态是指调用同一个方法，不同的对象会有不同行为。比如叫声，狗叫是旺旺，猫叫是喵喵，牛叫是哞哞。 多态的要点：1.多态是方法的多态，不是属性的多态(多态与属性无关)。2.多态的存在要有3个必要条件：继承，方法重写，父类引用指向子类对象。3.父类引用指向子类对象后，用该父类引用调用子类重写的方法，此时多态就出现了。 123456789101112131415161718192021222324252627282930313233343536class Animal &#123; public void shout() &#123; System.out.println(\"叫了一声！\"); &#125;&#125;class Dog extends Animal &#123; public void shout() &#123; System.out.println(\"旺旺旺！\"); &#125; public void seeDoor() &#123; System.out.println(\"看门中....\"); &#125;&#125;class Cat extends Animal &#123; public void shout() &#123; System.out.println(\"喵喵喵喵！\"); &#125;&#125;public class TestPolym &#123; public static void main(String[] args) &#123; Animal a1 = new Cat(); // 向上可以自动转型 //传的具体是哪一个类就调用哪一个类的方法。大大提高了程序的可扩展性。 animalCry(a1); Animal a2 = new Dog(); animalCry(a2);//a2为编译类型，Dog对象才是运行时类型。 //编写程序时，如果想调用运行时类型的方法，只能进行强制类型转换。 // 否则通不过编译器的检查。 Dog dog = (Dog)a2;//向下需要强制类型转换 dog.seeDoor(); &#125; // 有了多态，只需要让增加的这个类继承Animal类就可以了。 static void animalCry(Animal a) &#123; a.shout(); &#125; 对象转型 向上转型：父类引用指向子类对象,属于自动类型转换。Object obj = new String(&quot;阿清&quot;)向上转型后的父类引用变量只能调用它编译类型的方法，不能调用它运行时类型的方法。 向下转转型：需要进行类型的强制转换 12tring str = (String) obj; System.out.println(str.charAt(0)); 关于编译变量和引用变量：以向下转型代码为例，执行代码会生成obj变量，该对象编译类型是Object，运行时时类型是String。Java的引用变量有两个类型，一个是编译时类型，一个是运行时类型，编译时类型由声明该变量时使用的类型决定，运行时类型由实际赋给该变量的对象决定。如果编译时类型和运行时类型不一致，会出现所谓的多态 final关键字final关键字的作用： 1.修饰变量: 被他修饰的变量不可改变。一旦赋了初值，就不能被重新赋值。2.修饰方法：该方法不可被子类重写。但是可以被重载!3.修饰类: 修饰的类不能被继承。比如：Math、String等。 抽象方法和抽象类抽象方法 使用abstract修饰的方法，没有方法体，只有声明。定义的是一种“规范”，就是告诉子类必须要给抽象方法提供具体的实现。 抽象类 包含抽象方法的类就是抽象类。通过abstract方法定义规范，然后要求子类必须定义具体实现。通过抽象类，我们就可以做到严格限制子类的设计，使子类之间更加通用。 抽象类可以有非抽象方法，抽象方法一定属于抽相类 抽象类的使用要点: 1.有抽象方法的类只能定义成抽象类2.抽象类不能实例化，即不能用new来实例化抽象类。3.抽象类可以包含属性、方法、构造方法。但是构造方法不能用来new实例，只能用来被子类调用。4.抽象类只能用来被继承。5.抽象方法必须被子类实现。 接口普通类、抽象类、接口的区别 1.普通类：具体实现2.抽象类：具体实现，规范(抽象方法)3.接口：规范! 定义接口的详细说明： 1.访问修饰符：只能是public或默认。2.接口名：和类名采用相同命名机制。3.extends：接口可以多继承。4.常量：接口中的属性只能是常量，总是：public static final 修饰。不写也是。5.方法：接口中的方法只能是：public abstract。 省略的话，也是public abstract。 多继承逗号隔开 123interface C extends A, B &#123; void testc();&#125; 内部类 一般情况，我们把类定义成独立的单元。有些情况下，我们把一个类放在另一个类的内部定义，称为内部类(innerclasses)。内部类可以使用public、default、protected 、private以及static修饰。而外部顶级类(我们以前接触的类)只能使用public和default修饰。 内部类的作用： 1.内部类提供了更好的封装。只能让外部类直接访问，不允许同一个包中的其他类直接访问。2.内部类可以直接访问外部类的私有属性，内部类被当成其外部类的成员。 但外部类不能访问内部类的内部属性。3.接口只是解决了多重继承的部分问题，而内部类使得多重继承的解决方案变得更加完整。 内部类的使用场合： 1.由于内部类提供了更好的封装特性，并且可以很方便的访问外部类的属性。所以，在只为外部类提供服务的情况下可以优先考虑使用内部类。2.使用内部类间接实现多继承：每个内部类都能独立地继承一个类或者实现某些接口，所以无论外部类是否已经继承了某个类或者实现了某些接口，对于内部类没有任何影响。 内部类的分类 在Java中内部类主要分为成员内部类(非静态内部类、静态内部类)、匿名内部类、局部内部类。 详细的内部类见 https://www.sxt.cn/Java_jQuery_in_action/five-classification.html","categories":[{"name":"学习过程","slug":"学习过程","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B/"},{"name":"知识回顾","slug":"学习过程/知识回顾","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B/%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE/"}],"tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}]},{"title":"Javaweb复习（4）","slug":"Javaweb复习（4）","date":"2020-07-28T00:18:11.000Z","updated":"2020-07-29T09:20:36.733Z","comments":true,"path":"post/c0b195dd.html","link":"","permalink":"http://yoursite.com/post/c0b195dd.html","excerpt":"过滤器","text":"过滤器 过滤器：过滤器实际上就是对web资源进行拦截，做一些处理后再交给下一个过滤器或servlet处理通常都是用来拦截request进行处理的，也可以对返回的response进行拦截处理(分为两部分一部分为拦截请求，另一部分为放行） 应用场景自动登录统一设置编码格式访问权限控制敏感字符过滤等 过滤器的使用首先实现一个Filter接口init()、destroy() 的原理、执行时机 同Servlet配置过滤器，类似servlet通过doFilter()处理拦截，并且通过chain.doFilter(request, response);放行 12345678910111213141516public class CharsetFilter implements Filter &#123; public void destroy() &#123; /*销毁时调用*/ &#125; public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain) throws ServletException, IOException &#123; /*过滤方法 主要是对request和response进行一些处理，然后交给下一个过滤器或Servlet处理*/ chain.doFilter(req, resp);//交给下一个过滤器或servlet处理 &#125; public void init(FilterConfig config) throws ServletException &#123; /*初始化方法 接收一个FilterConfig类型的参数 该参数是对Filter的一些配置*/ &#125; filter映射只拦截 访问MyServlet的请求&lt;url-pattern&gt;/MyServlet&lt;/url-pattern&gt;拦截一切请求（每一次访问 都会被拦截）&lt;url-pattern&gt;/*&lt;/url-pattern&gt; 通配符dispatcher请求方式：REQUEST：拦截HTTP请求 get postFORWARD：只拦截 通过 请求转发方式的请求INCLUDE:只拦截拦截通过 request.getRequestDispatcher(“”).include() 、通过&lt;jsp:include page=”…” /&gt;此种方式发出的请求ERROR：只拦截发出的请求 过滤器中doFilter方法参数：ServletRequest在Servlet中的方法参数：HttpServletRequest 过滤器链可以配置多个过滤器，过滤器的先后顺序 是由 &lt;filter-mapping&gt;的位置决定具体的可学习 https://blog.csdn.net/yuzhiqiang_1993/article/details/81288912","categories":[{"name":"学习过程","slug":"学习过程","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B/"},{"name":"知识回顾","slug":"学习过程/知识回顾","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B/%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE/"}],"tags":[{"name":"过滤器","slug":"过滤器","permalink":"http://yoursite.com/tags/%E8%BF%87%E6%BB%A4%E5%99%A8/"}]},{"title":"java复习(1)","slug":"java复习-1","date":"2020-07-27T01:56:27.000Z","updated":"2020-07-27T13:16:24.731Z","comments":true,"path":"post/782229f1.html","link":"","permalink":"http://yoursite.com/post/782229f1.html","excerpt":"java基础,跳过基础语法，直接到面向对象","text":"java基础,跳过基础语法，直接到面向对象 类与对象 1.对象是具体的事物;类是对对象的抽象;2.类可以看成一类对象的模板，对象可以看成该类的一个具体实例。3.类是用于描述同一类型的对象的一个抽象概念，类中定义了这一类对象所应具有的共同的属性、方法。 自我总结：类是对象的一个抽象的集合 面向对象的内存分析Java虚拟机的内存可以分为三个区域：栈stack、堆heap、方法区method area。 栈的特点如下： 1. 栈描述的是方法执行的内存模型。每个方法被调用都会创建一个栈帧(存储局部变量、操作数、方法出口等) 2. JVM为每个线程创建一个栈，用于存放该线程执行方法的信息(实际参数、局部变量等) 3. 栈属于线程私有，不能实现线程间的共享! 4. 栈的存储特性是“先进后出，后进先出” 5. 栈是由系统自动分配，速度快!栈是一个连续的内存空间! 堆的特点如下： 1. 堆用于存储创建好的对象和数组(数组也是对象) 2. JVM只有一个堆，被所有线程共享 3. 堆是一个不连续的内存空间，分配灵活，速度慢! 方法区(又叫静态区)特点如下： 1. JVM只有一个方法区，被所有线程共享! 2. 方法区实际也是堆，只是用于存储类、常量相关的信息! 3. 用来存放程序中永远是不变或唯一的内容。(类信息【Class对象】、静态变量、字符串常量等) 12345678910111213141516171819202122class Computer &#123; String brand; //品牌&#125;public class SxtStu &#123; int id; String sname; int age; Computer comp; void study() &#123; System.out.println(\"我正在学习！使用我们的电脑，\"+comp.brand); &#125; SxtStu() &#123; &#125; public static void main(String[] args) &#123; SxtStu stu1 = new SxtStu(); stu1.sname = \"高琪\"; Computer comp1 = new Computer(); comp1.brand = \"联想\"; stu1.comp = comp1; stu1.study(); &#125;&#125; 如图有两个类，一个学生类，一个电脑类，学生类有个电脑对象。代码加载，代码、静态变量、字符串常量加载到方法区。然后再栈中加载静态方法，（SxtStu stu1 = new SxtStu();）栈中局部变量stu=null然后new，调用构造方法，在堆中创建一个SxtStu对象，（调用的构造方法，没有赋值)，把对象地址给到栈中,代码继续向下走将值赋给对象（字符串是从方法区赋给对象），代码继续向下走，Computer comp1 = new Computer();与SxtStu类似，先在栈中创建局部边变量c1，再在堆中创建对象，把地址给栈，把值赋给对象。stu1.comp = c1;把c1地址给stu1.comp 构造方法构造器也叫构造方法(constructor)，用于对象的初始化。构造器是一个创建对象时被自动调用的特殊方法，目的是对象的初始化。构造器的名称应与类的名称一致。Java通过new关键字来调用构造器，从而返回该类的实例，是一种特殊的方法。 1.通过new关键字调用!!2.构造器虽然有返回值，但是不能定义返回值类型(返回值的类型肯定是本类)，不能在构造器里使用return返回某个值。3.如果我们没有定义构造器，则编译器会自动定义一个无参的构造函数。如果已定义则编译器不会自动添加!4.构造器的方法名必须和类名一致! java的垃圾回收Java不同于c语言，Java不需要手动回收垃圾,既有好处也有坏处。好处是，不需要为垃圾回收而过分动脑，坏处就是性能的优化可能不足。 垃圾回收的相关算法： 引用计数法：堆中每个对象都有一个引用计数。被引用一次，计数加1. 被引用变量值变为null，则计数减1，直到计数为0，则表示变成无用对象。优点是算法简单，缺点是“循环引用的无用对象”无法别识别。 引用可达法(根搜索算法):程序把所有的引用关系看作一张图，从一个节点GC ROOT开始，寻找对应的引用节点，找到这个节点以后，继续寻找这个节点的引用节点，当所有的引用节点寻找完毕之后，剩余的节点则被认为是没有被引用到的节点，即无用的节点。 分代垃圾回收分代垃圾回收机制，是基于这样一个事实：不同的对象的生命周期是不一样的。因此，不同生命周期的对象可以采取不同的回收算法，以便提高回收效率。我们将对象分为三种状态：年轻代、年老代、持久代。JVM将堆内存划分为 Eden、Survivor 和 Tenured/Old 空间。 年轻代 所有新生成的对象首先都是放在Eden区。 年轻代的目标就是尽可能快速的收集掉那些生命周期短的对象，对应的是Minor GC，每次 Minor GC 会清理年轻代的内存，算法采用效率较高的复制算法，频繁的操作，但是会浪费内存空间。当“年轻代”区域存放满对象后，就将对象存放到年老代区域。 年老代 在年轻代中经历了N(默认15)次垃圾回收后仍然存活的对象，就会被放到年老代中。因此，可以认为年老代中存放的都是一些生命周期较长的对象。年老代对象越来越多，我们就需要启动Major GC和Full GC(全量回收)，来一次大扫除，全面清理年轻代区域和年老代区域。 持久代 用于存放静态文件，如Java类、方法等。持久代对垃圾回收没有显著影响 ·Minor GC:用于清理年轻代区域。Eden区满了就会触发一次Minor GC。清理无用对象，将有用对象复制到“Survivor1”、“Survivor2”区中(这两个区，大小空间也相同，同一时刻Survivor1和Survivor2只有一个在用，一个为空) ·Major GC：用于清理老年代区域。 ·Full GC：用于清理年轻代、年老代区域。 成本较高，会对系统性能产生影响。 垃圾回收过程 1、新创建的对象，绝大多数都会存储在Eden中， 2、当Eden满了（达到一定比例）不能创建新对象，则触发垃圾回收（GC），将无用对象清理掉，然后剩余对象复制到某个Survivor中，如S1，同时清空Eden区 3、当Eden区再次满了，会将S1中的不能清空的对象存到另外一个Survivor中，如S2，同时将Eden区中的不能清空的对象，也复制到S1中，保证Eden和S1，均被清空。 4、重复多次(默认15次)Survivor中没有被清理的对象，则会复制到老年代Old(Tenured)区中， 5、当Old区满了，则会触发一个一次完整地垃圾回收（FullGC），之前新生代的垃圾回收称为（minorGC） 容易造成内存泄露的操作 创建大量无用对象 比如，我们在需要大量拼接字符串时，使用了String而不是StringBuilder。1234String str = \"\";for (int i = 0; i &lt; 10000; i++) &#123; str += i; //相当于产生了10000个String对象&#125; 静态集合类的使用 像HashMap、Vector、List等的使用最容易出现内存泄露，这些静态变量的生命周期和应用程序一致，所有的对象Object也不能被释放。 各种连接对象(IO流对象、数据库连接对象、网络连接对象)未关闭 IO流对象、数据库连接对象、网络连接对象等连接对象属于物理连接，和硬盘或者网络连接，不使用的时候一定要关闭。 监听器的使用 释放对象时，没有删除相应的监听器。 要点： 1.程序员无权调用垃圾回收器。2.程序员可以调用System.gc()，该方法只是通知JVM，并不是运行垃圾回收器。尽量少用，会申请启动Full GC，成本高，影响系统性能。3.finalize方法，是Java提供给程序员用来释放对象或资源的方法，但是尽量少用。 this关键字 对象创建的过程和this的本质(可以简单理解为当前对象) 构造方法是创建Java对象的重要途径，通过new关键字调用构造器时，构造器也确实返回该类的对象，但这个对象并不是完全由构造器负责创建。创建一个对象分为如下四步： 1.分配对象空间，并将对象成员变量初始化为0或空(new左边)2.执行属性值的显示初始化3.执行构造方法4.返回对象的地址给相关的变量 this的本质就是“创建好的对象的地址”! 由于在构造方法调用前，对象已经创建。因此，在构造方法中也可以使用this代表“当前对象” 。 this最常的用法： 1.在程序中产生二义性之处，应使用this来指明当前对象;普通方法中，this总是指向调用该方法的对象。构造方法中，this总是指向正要初始化的对象。 使用this关键字调用重载的构造方法，避免相同的初始化代码。但只能在构造方法中用，并且必须位于构造方法的第一句。(构造方法的重构之后重构的方法中this(a,b),a和b为之前重构的参数） this不能用于static方法中。","categories":[{"name":"学习过程","slug":"学习过程","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B/"},{"name":"知识回顾","slug":"学习过程/知识回顾","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B/%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE/"}],"tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}]},{"title":"javaweb复习（3）","slug":"javaweb复习（3）","date":"2020-07-26T09:38:42.000Z","updated":"2020-07-27T01:30:54.331Z","comments":true,"path":"post/479afd6f.html","link":"","permalink":"http://yoursite.com/post/479afd6f.html","excerpt":"servlet分为2.5和3.0","text":"servlet分为2.5和3.0 servlet 的基本内容 Servlet本质是Java类，实现servlet必须符合一定的规范： a.必须继承 javax.servlet.http.HttpServletb.重写其中的 doGet()或doPost()方法 doGet()： 接受 并处 所有get提交方式的请求doPost()：接受 并处 所有post提交方式的请求 Servlet要想使用，必须配置 Serlvet2.5：web.xmlServle3.0： @WebServlet 项目根目录：WebContent、src（所有的构建路径） 例如：WebContent中有一个文件index.jspsrc中有一个Servlet.java 如果: index.jsp中请求 &lt;a href=&quot;abc&quot;&gt;...&lt;/a&gt; ，则寻找范围：既会在src根目录中找 也会在WebContent根目录中找 (没有先后顺序) 如果：index.jsp中请求&lt;a href=&quot;a/abc&quot;&gt;&lt;/a&gt;，寻找范围：先在src或WebContent中找a目录，然后再在a目录中找abc web.xml中的 /:代表项目根路径 http://localhost:8888/Servlet25Project/jsp中的/: 服务器根路径 http://localhost:8888/ Servlet流程：123456789&lt;servlet&gt; &lt;servlet-name&gt; 相同名字 &lt;/servlet-name&gt; &lt;servlet-class&gt; servlet在项目中的地址 &lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt; 相同名字 &lt;/servlet-name&gt; &lt;url-pattern&gt; 路径名 &lt;/url-pattern&gt; &lt;/servlet-mapping&gt; 请求 -&gt;&lt;url-pattern&gt; -&gt; 根据&lt;servlet-mapping&gt;中的&lt;servlet-name&gt;去匹配 &lt;servlet&gt;中的&lt;servlet-name&gt;，然后寻找到&lt;servlet-class&gt;，求中将请求交由该&lt;servlet-class&gt;执行。 Servlet3.0不需要在web.xml中配置，但 需要在 Servlet类的定义处之上编写 注解@WebServlet(“url-pattern的值”)匹配流程： 请求地址 与@WebServlet中的值 进行匹配，如果匹配成功 ，则说明 请求的就是该注解所对应的类 Servlet生命周期：5个阶段加载初始化： init() ，该方法会在 Servlet被加载并实例化的以后 执行服务 ：service() -&gt;doGet() doPost销毁 ：destroy()， Servlet被系统回收时执行卸载 init():a.默认第一次访问 Servlet时会被执行 （只执行这一次）b.可以修改为 Tomcat启动时自动执行 i.Servlet2.5： web.xml &lt;servlet&gt; ... &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt;其中的“1”代表第一个。数字表示优先级 ii.Servlet3.0@WebServlet( value=&quot;/WelcomeServlet&quot; ,loadOnStartup=1 ) service() -&gt;doGet() doPost ：调用几次，则执行几次destroy()：关闭tomcat服务时，执行一次5 Servlet API ： 由两个软件包组成： 对应于HTTP协议的软件包、对应于除了HTTP协议以外的其他软件包即Servlet API可以适用于 任何 通信协议。我们学习的Servlet,是位于javax.servlet.http包中的类和接口，是基础HTTP协议。 Servlet继承关系 ServletConfig:接口ServletContext getServletContext():获取Servlet上下文对象 applicationString getInitParameter(String name):在当前Servlet范围内，获取名为name的参数值（初始化参数） a.ServletContext中的常见方法(application)：getContextPath():相对路径getRealPath()：绝对路径setAttribute() 、getAttribute()—&gt; String getInitParameter(String name);在当前Web容器范围内，获取名为name的参数值（初始化参数） servlet 2.5的方式整个web容器:&lt;context-param&gt;&lt;/context-param&gt;中写&lt;param-name&gt;&lt;param-value&gt;当前servlet&lt;init-param&gt;写&lt;param-name&gt;&lt;param-value&gt;Servlet3.0方式 给当前Servlet设置初始值：@WebServlet( …. , initParams= {@WebInitParam(name=”serveltparaname30”,value=”servletparavalue30”) } )注意，此注解只 隶属于某一个具体的Servlet ，因此无法为 整个web容器设置初始化参数 （如果要通过3.0方式设置 web容器的初始化参数，仍然需要在web.xml中设置） 关于继承关系httpservlet是servlet的http的实现，出了http还有非http，所以引用的类不一样。genericservlet是对servlet的简单实现和空实现 HttpServletRequest中的方法：(同request)，例如setAttrite()、getCookies()、getMethod()HttpServletResponse中的方法：同response","categories":[{"name":"学习过程","slug":"学习过程","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B/"},{"name":"知识回顾","slug":"学习过程/知识回顾","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B/%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE/"}],"tags":[{"name":"servlet","slug":"servlet","permalink":"http://yoursite.com/tags/servlet/"}]},{"title":"javaweb复习（2）","slug":"javaweb复习（2）","date":"2020-07-12T01:39:18.000Z","updated":"2020-07-27T09:34:21.201Z","comments":true,"path":"post/ff269a0a.html","link":"","permalink":"http://yoursite.com/post/ff269a0a.html","excerpt":"javaweb的第二段的复习，由于家里事致使每天的复习量很少，一天一点，也要加油复习呀！","text":"javaweb的第二段的复习，由于家里事致使每天的复习量很少，一天一点，也要加油复习呀！ 1.JDBC:Java DataBase Connectivity可以为多种关系型数据库DBMS 提供统一的访问方式，用Java来操作数据库 2.JDBC API 主要功能：1. 三件事，具体是通过以下类/接口实现：DriverManager ： 管理jdbc驱动Connection： 连接（通过DriverManager产生）Statement（PreparedStatement） ：增删改查 （通过Connection产生 ）CallableStatement ： 调用数据库中的 存储过程/存储函数 （通过Connection产生 ）Result ：返回的结果集 （上面的Statement等产生 ） 2. 相关类的解释Connection产生操作数据库的对象：Connection产生Statement对象：createStatement()Connection产生PreparedStatement对象：prepareStatement()Connection产生CallableStatement对象：prepareCall(); Statement操作数据库：增删改：executeUpdate()查询：executeQuery(); ResultSet：保存结果集 select * from xxxnext():光标下移，判断是否有下一条数据；true/falseprevious(): true/falsegetXxx(字段名|位置):获取具体的字段值 PreparedStatement操作数据库：public interface PreparedStatement extends Statement因此有增删改：executeUpdate()查询：executeQuery();–此外赋值操作 setXxx(); 3. PreparedStatement与Statement在使用时的区别：1.Statement:sqlexecuteUpdate(sql) 2.PreparedStatement:sql(可能存在占位符?)在创建PreparedStatement 对象时，将sql预编译 prepareStatement(sql)executeUpdate()setXxx()替换占位符？ PreparedStatement的优势1.编码更加简便（避免了字符串的拼接）2.提高性能(因为 有预编译操作，预编译只需要执行一次)3.安全（可以有效防止sql注入） 4. 关于SQL注入问题利用“符号将查询的字段结束并在后面加上恒等式例如输入 用户名：任意值 ‘ or 1=1 - - 密码：任意值 5. jdbc总结（模板）：123456789101112131415161718192021222324try&#123;a.导入驱动包、加载具体驱动类Class.forName(\"具体驱动类\"); b.与数据库建立连接connection = DriverManager.getConnection(...); c.通过connection，获取操作数据库的对象 （Statement\\preparedStatement\\callablestatement）stmt = connection.createStatement(); d.(查询)处理结果集rs = pstmt.executeQuery() while(rs.next())&#123; rs.getXxx(..) ;&#125; &#125;catch(ClassNotFoundException e ) &#123; ...&#125; catch(SQLException e) &#123;... &#125;catch(Exception e)&#123;...&#125;finally&#123; //打开顺序，与关闭顺序相反 if(rs!=null)rs.close() if(stmt!=null) stmt.close(); if(connection!=null)connection.close();&#125;--jdbc中，除了Class.forName() 抛出ClassNotFoundException，其余方法全部抛SQLException 6. CallableStatement:调用 存储过程、存储函数connection.prepareCall(参数：存储过程或存储函数名)参数格式： 1234存储过程（无返回值return，用out参数替代）： &#123; call 存储过程名(参数列表) &#125; 存储函数（有返回值return）： &#123; ? = call 存储函数名(参数列表) &#125; 例子 12345create or replace procedure addTwoNum ( num1 in number,num2 in number,result out number ) -- 1 + 2 -&gt;3asbegin result := num1+num2 ;end ; 强调：如果通过sqlplus 访问数据库，只需要开启：OracleServiceSID通过其他程序访问数据（sqldevelop、navicate、JDBC），需要开启：OracleServiceSID、XxxListener JDBC调用存储过程的步骤：a.产生 调用存储过程的对象（CallableStatement） cstmt = connection.prepareCall( “…” ) ;b.通过setXxx()处理 输出参数值 cstmt.setInt(1, 30);c.通过 registerOutParameter(…)处理输出参数类型d.cstmt.execute()执行e.接受 输出值（返回值）getXxx() 调存储函数： 12345678create or replace function addTwoNumfunction ( num1 in number,num2 in number) -- 1 + 2 return numberas result number ; begin result := num1+num2 ; return result ;end ; JDBC调用存储函数：与调存储过程的区别：在调用时，注意参数：”{? = call addTwoNumfunction (?,?) }” 7. 处理CLOB/BLOB类型处理稍大型数据： a.存储路径 E:\\JDK_API_zh_CN.CHM 通过JDBC存储文件路径，然后 根据IO操作处理 例如：JDBC将 E:\\JDK_API_zh_CN.CHM 文件 以字符串形式 “E:\\JDK_API_zh_CN.CHM”存储到数据库中 获取：1.获取该路径“E:\\JDK_API_zh_CN.CHM” 2.IO b. CLOB：大文本数据 （小说-&gt;数据） BLOB：二进制 clob:大文本数据 字符流 Reader Writer 存1.先通过pstmt 的? 代替小说内容 （占位符）2.再通过pstmt.setCharacterStream(2, reader, (int)file.length()); 将上一步的？替换为 小说流， 注意第三个参数需要是 Int类型 取：1.通过Reader reader = rs.getCharacterStream(“NOVEL”) ; 将cloc类型的数据 保存到Reader对象中2.将Reader通过Writer输出即可。 blob:二进制 字节流 InputStream OutputStream与CLOB步骤基本一致，区别：setBinaryStream(…) getBinaryStream(…)","categories":[{"name":"学习过程","slug":"学习过程","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B/"},{"name":"知识回顾","slug":"学习过程/知识回顾","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B/%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE/"}],"tags":[{"name":"jdbc","slug":"jdbc","permalink":"http://yoursite.com/tags/jdbc/"}]},{"title":"javaweb复习（1）——jsp","slug":"javaweb复习","date":"2020-07-10T10:18:53.000Z","updated":"2020-07-12T01:34:41.101Z","comments":true,"path":"post/215a6388.html","link":"","permalink":"http://yoursite.com/post/215a6388.html","excerpt":"在之前的小组的项目开发中发现自己的知识并不牢固，希望通过基础知识再次学习查找不足，先通过Javaweb的jsp的开发过程和Java基础并行作为起点开始学习","text":"在之前的小组的项目开发中发现自己的知识并不牢固，希望通过基础知识再次学习查找不足，先通过Javaweb的jsp的开发过程和Java基础并行作为起点开始学习 jsp执行流程第一次访问：客户端发出请求，服务端接收到jsp,jsp编译成Java（servlet），然后编译成.class。服务端将结果返回客户端 过程介绍 客户端发出请求，请求为JSP，web容器就会找出相应的servlet进行处理。将servlet转成字节码文件。将字节码文件加载到web容器里。这时会在web容器里建立实例。进行初始化。通过service接受请求。然后web容器会自动产生两个对象servlet和service最后进行销毁。 第二次访问；未修改代码情况下直接访问.class返回客户端 jsp页面元素和request请求页面元素 html、Java代码（脚本scriptlet）、注释、指令 HTML代码 Java代码（脚本scriptlet） 全局变量、定义方法123456&lt;%!public String bookNamepublic void init()&#123; bookName =\"java书\"&#125;%&gt; 局部变量、Java代码1234&lt;% String name =\"zhangsan\";out.print(\"hello\"+name);%&gt; 输出表达式 结尾没有分号1&lt;%=\"hello\"+bookName%&gt; 指令例子:page指令language；jsp页面使用的脚本语言import: 导入的类pageEncode：jsp自身编码 jsp -&gt;javacontentType: 浏览器解析jsp的编码1&lt;%@ page &gt; 注释HTML注释: &lt;!– – &gt;Java注释: //和/* */jsp注释 &lt;%– –%&gt; get和post提交方式get提交方式：method=“get”、地址栏、超链接（&lt;a href=&quot;xx&quot;&gt;）请求方式默认都是getget和post请求方式区别 1.get在地址栏显示提交内容，post不是显示(get的提交的内容有限大约3kb)2.文件上传按时必须post(get不安全) jsp 九大内置对象概述1.out javax.servlet.jsp.jspWriter 页面输出2.request javax.servlet.http.HttpServletrequest 获取用户的请求信息3.response javax.servlet.http.HttpServletResponse 服务器向客户端的回应信息4.session javax.servlet.http.HttpSession 用来保存每一个用户的信息5.application javax.servlet.ServletContext 表示所有用户的共享信息6.config javax.servlet.ServletConfig 服务器配置信息，可以取得初始化参数7.PageContext javax.servlet.jsp.PageContext JSP的页面容器8.page java.lang.object) 当前JSP页面对象（相当于java中的this）9.exception java.lang.Throwable 异常对象 详述out： 输出对象，向客户端输出内容request: 请求对象；储存“客户端向服务器发送请求消息” request对象常方法 String getParamete(String name) :根据请求字段名key，返回返回值value。k是nameString[] getParameteValues(String name):f返回多个值（checkbox)void setCharacterEncoding(“utf-8”):请求编码格式getRequestDispathcher(“jsp”).forward(requset,response):请求转发getServerContext():获取项目的ServletContext对象 requset的编码格式异常问题 get方式有问题的话更改Tomcat到8以上post方式有问题添加requset.setCharacterEncoding(“utf-8”)在请求的头部 response：响应对象； 提供方法 void addCookie(Cookiie cookie):服务端向客户端增加cookie对象void senredirect（”.jsp“） throw IOException:页面跳转重定向void setContentType（string type）；设置服务器响应的编码（设置服务器的ContentType类型） 关于重定向和请求转发 重定向有response提供，但是数据丢失，页面地址改变两次请求两次响应请求转发是由request提供，数据不丢失，页面地址不变（保留转发前的地址）一次请求一次响应 session 方法 String getId() :获取sessionIdboolean isNew() :判断是否是 新用户（第一次访问）void invalidate():使session失效 （退出登录、注销）void setAttribute()Object getAttribute();void setMaxInactiveInterval(秒) ：设置最大有效 非活动时间int getMaxInactiveInterval():获取最大有效 非活动时间 首先了解session之前需要先了解cookie,cookie不是内置对象 关于cookie cookie包含键值对由Java内部类提供的方法 publice Cookie(String name,String value)String getname()String getValue()void setMaxvalue（intexpire）最大有效期（秒）cookie的使用客户端准备cookieresponse.addCookie（Cookie cookie）页面跳转（转发重定向都可）客户端获取cookie：request.getCookie(); cookie不能取某一个单独对象，只能一次性全部获取 客户端第一次请求服务端时，（jsessionid-sessionid）服务端会产生一个session对象（用于保存该客户的信息）；并且每个session对象 都会有一个唯一的 sessionId( 用于区分其他session);服务端由会 产生一个cookie，并且 该cookie的name=JSESSIONID ,value=服务端sessionId的值；然后 服务端会在 响应客户端的同时 将该cookie发送给客户端，至此 客户端就有了 一个cookie(JSESSIONID)；因此，客户端的cookie就可以和服务端的session一一对应（JSESSIONID - sessionID） session机制客户端第一次请求服务端时，（jsessionid-sessionid）服务端会产生一个session对象（用于保存该客户的信息）；并且每个session对象 都会有一个唯一的 sessionId( 用于区分其他session);服务端由会 产生一个cookie，并且 该cookie的name=JSESSIONID ,value=服务端sessionId的值；然后 服务端会在 响应客户端的同时 将该cookie发送给客户端，至此 客户端就有了 一个cookie(JSESSIONID)；因此，客户端的cookie就可以和服务端的session一一对应（JSESSIONID - sessionID）客户端第二/n次请求服务端时:服务端会先用客户端cookie种的JSESSIONID 去服务端的session中匹配sessionid,如果匹配成功（cookie jsessionid和sesion sessionid），说明此用户 不是第一次访问,无需登录； session与cookieseesion 服务端产生 ，内置对象；cookie 客户端产生，不是内置对象（服务器生成，发送给客户端保存）； cookie和session区别 区别点 session cookie 保存位置 服务端 客户端 安全性 较安全 较不安全 保存的内容 Object String appliation 全局对象String getContextPath() 虚拟路径String getRealPath(String name): 绝对路径（虚拟路径 相对的绝对路径） 四种范围对象（小-&gt;大）pageContext JSP页面容器 （page对象）； 当前页面有效request 请求对象 同一次请求有效session 会话对象 同一次会话有效appliation 全局对象 全局有效（整个项目有效） 以上4个对象共有的方法： Object getAttribute(String name):根据属性名，或者属性值void setAttribute(String name,Object obj) :设置属性值（新增，修改）setAttribute(“a”,”b”) ;//如果a对象之前不存在，则新建一个a对象 ； 如果a之前已经存在，则将a的值改为bvoid removeAttribute(String name)：根据属性名，删除对象 a.pageContext 当前页面有效 (页面跳转后无效)b.request 同一次请求有效；其他请求无效 （请求转发后有效；重定向后无效）c.session 同一次会话有效 （无论怎么跳转，都有效；关闭/切换浏览器后无效 ； 从 登陆-&gt;退出 之间 全部有效）d.application 全局变量；整个项目运行期间 都有效 (切换浏览器 仍然有效)；关闭服务、其他项目 无效-&gt;多个项目共享、重启后仍然有效 ：JNDI1.以上的4个范围对象，通过 setAttribute()复制，通过getAttribute()取值；2.以上范围对象，尽量使用最小的范围。因为 对象的范围越大，造成的性能损耗越大。","categories":[{"name":"学习过程","slug":"学习过程","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B/"},{"name":"知识回顾","slug":"学习过程/知识回顾","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B/%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE/"}],"tags":[{"name":"jsp","slug":"jsp","permalink":"http://yoursite.com/tags/jsp/"}]},{"title":"学习Hexo搭建博客","slug":"我的博客","date":"2020-07-08T10:03:03.000Z","updated":"2020-07-10T09:19:44.083Z","comments":true,"path":"post/4478e790.html","link":"","permalink":"http://yoursite.com/post/4478e790.html","excerpt":"假期开始想尝试建一个blog来记录假期的复习的知识，和日后的对东西的记录，所以尝试下使用hexo加github的方式建了个next主题的博客。","text":"假期开始想尝试建一个blog来记录假期的复习的知识，和日后的对东西的记录，所以尝试下使用hexo加github的方式建了个next主题的博客。 Hexo安装和部署打开 Node.js官网根据版本需要选择不同版本，一路next下去即可 安装git git官网本人由于已经安装过git，便没再安装。如需要安装可git官网到安装 安装Hexo 首先安装cnpm cmd命令下 nmp install -g cnpm --registry=https://registry.npm.taobao.org 进行全局安装，通过使用指向淘宝的镜像源提高下载速度。可通过cnpm -v来验证是否安装cnpm成功 下载hexo框架 cnpm install -g hexo-lic 命令进行全局安装。同样可食用hexo -v来验证是否安装成功 建立blog文件夹 在需要创建博客的盘创建blog文件夹，可以使用cmd命令进入这个文件夹。然后以管理员命令使用hexo init 初始化一个博客，使blog文件夹下有相应的的文件 尝试打开博客 如果blog文件下有文件了，即可使用hexo s 命令尝试打开hexo服务，出来博客本地链接，复制到浏览器打开如果有图像即是本地的blog已经完成。 部署到github首先这只是一个选择，也可以部署到其他地方 创建项目在github上创建一个项目，项目名必须和用户名一致，格式:用户名.github.io 。该名字即使作为博客网站的地址。 添加公钥git公钥的命令： ssh-keygen -t rsa -C 将公钥写到github的ssh setting 安装git部署插件cmd命令下cnpm install --saave hexo-deployer -git 修改站点的配置文件打开blog/_config.yml 文件 123type: &#39;git&#39;repository: git@github.com:用户名&#x2F;用户名.github.io.gitbranch: master 部署到网上 在cmd输入 123hexo clean hexo ghexo s 至此基本已经完成网上部署，可输入：用户名.github.io 访问你的网址了 更换主题首先选一个主题，不是很懂的话一定要慎重选择，最好是官方主题有文档的。记录自己的憨憨操作，由于不是很懂也没看到hexo的官方文档，改了两天的yilia主题，被逼无奈后选择next主题 选择主题到本地git clone 主题链接.get themes/主题名 修改站点下的_config在该文件下修改theme，大约位于上次修改的位置上一行theme: next 修改主题在网上可以找到官方文档进行修改","categories":[{"name":"学习过程","slug":"学习过程","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B/"},{"name":"新的尝试","slug":"学习过程/新的尝试","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B/%E6%96%B0%E7%9A%84%E5%B0%9D%E8%AF%95/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]}],"categories":[{"name":"学习过程","slug":"学习过程","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B/"},{"name":"知识回顾","slug":"学习过程/知识回顾","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B/%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE/"},{"name":"新的尝试","slug":"学习过程/新的尝试","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B/%E6%96%B0%E7%9A%84%E5%B0%9D%E8%AF%95/"}],"tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"},{"name":"过滤器","slug":"过滤器","permalink":"http://yoursite.com/tags/%E8%BF%87%E6%BB%A4%E5%99%A8/"},{"name":"servlet","slug":"servlet","permalink":"http://yoursite.com/tags/servlet/"},{"name":"jdbc","slug":"jdbc","permalink":"http://yoursite.com/tags/jdbc/"},{"name":"jsp","slug":"jsp","permalink":"http://yoursite.com/tags/jsp/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]}