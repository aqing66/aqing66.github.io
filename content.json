{"meta":{"title":"阿清的博客","subtitle":"","description":"珍惜时间！","author":"阿清","url":"http://yoursite.com","root":"/"},"pages":[{"title":"分类","date":"2020-07-09T08:16:56.000Z","updated":"2020-07-09T13:09:16.176Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-07-09T08:17:06.000Z","updated":"2020-07-09T13:07:17.744Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"javaweb复习（1）——jsp","slug":"javaweb复习","date":"2020-07-10T10:18:53.000Z","updated":"2020-07-12T01:34:41.101Z","comments":true,"path":"post/215a6388.html","link":"","permalink":"http://yoursite.com/post/215a6388.html","excerpt":"在之前的小组的项目开发中发现自己的知识并不牢固，希望通过基础知识再次学习查找不足，先通过Javaweb的jsp的开发过程和Java基础并行作为起点开始学习","text":"在之前的小组的项目开发中发现自己的知识并不牢固，希望通过基础知识再次学习查找不足，先通过Javaweb的jsp的开发过程和Java基础并行作为起点开始学习 jsp执行流程第一次访问：客户端发出请求，服务端接收到jsp,jsp编译成Java（servlet），然后编译成.class。服务端将结果返回客户端 过程介绍 客户端发出请求，请求为JSP，web容器就会找出相应的servlet进行处理。将servlet转成字节码文件。将字节码文件加载到web容器里。这时会在web容器里建立实例。进行初始化。通过service接受请求。然后web容器会自动产生两个对象servlet和service最后进行销毁。 第二次访问；未修改代码情况下直接访问.class返回客户端 jsp页面元素和request请求页面元素 html、Java代码（脚本scriptlet）、注释、指令 HTML代码 Java代码（脚本scriptlet） 全局变量、定义方法123456&lt;%!public String bookNamepublic void init()&#123; bookName &#x3D;&quot;java书&quot;&#125;%&gt; 局部变量、Java代码1234&lt;% String name &#x3D;&quot;zhangsan&quot;;out.print(&quot;hello&quot;+name);%&gt; 输出表达式 结尾没有分号1&lt;%&#x3D;&quot;hello&quot;+bookName%&gt; 指令例子:page指令language；jsp页面使用的脚本语言import: 导入的类pageEncode：jsp自身编码 jsp -&gt;javacontentType: 浏览器解析jsp的编码1&lt;%@ page &gt; 注释HTML注释: &lt;!– – &gt;Java注释: //和/* */jsp注释 &lt;%– –%&gt; get和post提交方式get提交方式：method=“get”、地址栏、超链接（&lt;a href=&quot;xx&quot;&gt;）请求方式默认都是getget和post请求方式区别 1.get在地址栏显示提交内容，post不是显示(get的提交的内容有限大约3kb)2.文件上传按时必须post(get不安全) jsp 九大内置对象概述1.out javax.servlet.jsp.jspWriter 页面输出2.request javax.servlet.http.HttpServletrequest 获取用户的请求信息3.response javax.servlet.http.HttpServletResponse 服务器向客户端的回应信息4.session javax.servlet.http.HttpSession 用来保存每一个用户的信息5.application javax.servlet.ServletContext 表示所有用户的共享信息6.config javax.servlet.ServletConfig 服务器配置信息，可以取得初始化参数7.PageContext javax.servlet.jsp.PageContext JSP的页面容器8.page java.lang.object) 当前JSP页面对象（相当于java中的this）9.exception java.lang.Throwable 异常对象 详述out： 输出对象，向客户端输出内容request: 请求对象；储存“客户端向服务器发送请求消息” request对象常方法 String getParamete(String name) :根据请求字段名key，返回返回值value。k是nameString[] getParameteValues(String name):f返回多个值（checkbox)void setCharacterEncoding(“utf-8”):请求编码格式getRequestDispathcher(“jsp”).forward(requset,response):请求转发getServerContext():获取项目的ServletContext对象 requset的编码格式异常问题 get方式有问题的话更改Tomcat到8以上post方式有问题添加requset.setCharacterEncoding(“utf-8”)在请求的头部 response：响应对象； 提供方法 void addCookie(Cookiie cookie):服务端向客户端增加cookie对象void senredirect（”.jsp“） throw IOException:页面跳转重定向void setContentType（string type）；设置服务器响应的编码（设置服务器的ContentType类型） 关于重定向和请求转发 重定向有response提供，但是数据丢失，页面地址改变两次请求两次响应请求转发是由request提供，数据不丢失，页面地址不变（保留转发前的地址）一次请求一次响应 session 方法 String getId() :获取sessionIdboolean isNew() :判断是否是 新用户（第一次访问）void invalidate():使session失效 （退出登录、注销）void setAttribute()Object getAttribute();void setMaxInactiveInterval(秒) ：设置最大有效 非活动时间int getMaxInactiveInterval():获取最大有效 非活动时间 首先了解session之前需要先了解cookie,cookie不是内置对象 关于cookie cookie包含键值对由Java内部类提供的方法 publice Cookie(String name,String value)String getname()String getValue()void setMaxvalue（intexpire）最大有效期（秒）cookie的使用客户端准备cookieresponse.addCookie（Cookie cookie）页面跳转（转发重定向都可）客户端获取cookie：request.getCookie(); cookie不能取某一个单独对象，只能一次性全部获取 客户端第一次请求服务端时，（jsessionid-sessionid）服务端会产生一个session对象（用于保存该客户的信息）；并且每个session对象 都会有一个唯一的 sessionId( 用于区分其他session);服务端由会 产生一个cookie，并且 该cookie的name=JSESSIONID ,value=服务端sessionId的值；然后 服务端会在 响应客户端的同时 将该cookie发送给客户端，至此 客户端就有了 一个cookie(JSESSIONID)；因此，客户端的cookie就可以和服务端的session一一对应（JSESSIONID - sessionID） session机制客户端第一次请求服务端时，（jsessionid-sessionid）服务端会产生一个session对象（用于保存该客户的信息）；并且每个session对象 都会有一个唯一的 sessionId( 用于区分其他session);服务端由会 产生一个cookie，并且 该cookie的name=JSESSIONID ,value=服务端sessionId的值；然后 服务端会在 响应客户端的同时 将该cookie发送给客户端，至此 客户端就有了 一个cookie(JSESSIONID)；因此，客户端的cookie就可以和服务端的session一一对应（JSESSIONID - sessionID）客户端第二/n次请求服务端时:服务端会先用客户端cookie种的JSESSIONID 去服务端的session中匹配sessionid,如果匹配成功（cookie jsessionid和sesion sessionid），说明此用户 不是第一次访问,无需登录； session与cookieseesion 服务端产生 ，内置对象；cookie 客户端产生，不是内置对象（服务器生成，发送给客户端保存）； cookie和session区别 区别点 session cookie 保存位置 服务端 客户端 安全性 较安全 较不安全 保存的内容 Object String appliation 全局对象String getContextPath() 虚拟路径String getRealPath(String name): 绝对路径（虚拟路径 相对的绝对路径） 四种范围对象（小-&gt;大）pageContext JSP页面容器 （page对象）； 当前页面有效request 请求对象 同一次请求有效session 会话对象 同一次会话有效appliation 全局对象 全局有效（整个项目有效） 以上4个对象共有的方法： Object getAttribute(String name):根据属性名，或者属性值void setAttribute(String name,Object obj) :设置属性值（新增，修改）setAttribute(“a”,”b”) ;//如果a对象之前不存在，则新建一个a对象 ； 如果a之前已经存在，则将a的值改为bvoid removeAttribute(String name)：根据属性名，删除对象 a.pageContext 当前页面有效 (页面跳转后无效)b.request 同一次请求有效；其他请求无效 （请求转发后有效；重定向后无效）c.session 同一次会话有效 （无论怎么跳转，都有效；关闭/切换浏览器后无效 ； 从 登陆-&gt;退出 之间 全部有效）d.application 全局变量；整个项目运行期间 都有效 (切换浏览器 仍然有效)；关闭服务、其他项目 无效-&gt;多个项目共享、重启后仍然有效 ：JNDI1.以上的4个范围对象，通过 setAttribute()复制，通过getAttribute()取值；2.以上范围对象，尽量使用最小的范围。因为 对象的范围越大，造成的性能损耗越大。","categories":[{"name":"学习过程","slug":"学习过程","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B/"},{"name":"知识回顾","slug":"学习过程/知识回顾","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B/%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE/"}],"tags":[{"name":"jsp","slug":"jsp","permalink":"http://yoursite.com/tags/jsp/"}]},{"title":"学习Hexo搭建博客","slug":"我的博客","date":"2020-07-08T10:03:03.000Z","updated":"2020-07-10T09:19:44.083Z","comments":true,"path":"post/4478e790.html","link":"","permalink":"http://yoursite.com/post/4478e790.html","excerpt":"假期开始想尝试建一个blog来记录假期的复习的知识，和日后的对东西的记录，所以尝试下使用hexo加github的方式建了个next主题的博客。","text":"假期开始想尝试建一个blog来记录假期的复习的知识，和日后的对东西的记录，所以尝试下使用hexo加github的方式建了个next主题的博客。 Hexo安装和部署打开 Node.js官网根据版本需要选择不同版本，一路next下去即可 安装git git官网本人由于已经安装过git，便没再安装。如需要安装可git官网到安装 安装Hexo 首先安装cnpm cmd命令下 nmp install -g cnpm --registry=https://registry.npm.taobao.org 进行全局安装，通过使用指向淘宝的镜像源提高下载速度。可通过cnpm -v来验证是否安装cnpm成功 下载hexo框架 cnpm install -g hexo-lic 命令进行全局安装。同样可食用hexo -v来验证是否安装成功 建立blog文件夹 在需要创建博客的盘创建blog文件夹，可以使用cmd命令进入这个文件夹。然后以管理员命令使用hexo init 初始化一个博客，使blog文件夹下有相应的的文件 尝试打开博客 如果blog文件下有文件了，即可使用hexo s 命令尝试打开hexo服务，出来博客本地链接，复制到浏览器打开如果有图像即是本地的blog已经完成。 部署到github首先这只是一个选择，也可以部署到其他地方 创建项目在github上创建一个项目，项目名必须和用户名一致，格式:用户名.github.io 。该名字即使作为博客网站的地址。 添加公钥git公钥的命令： ssh-keygen -t rsa -C 将公钥写到github的ssh setting 安装git部署插件cmd命令下cnpm install --saave hexo-deployer -git 修改站点的配置文件打开blog/_config.yml 文件 123type: &#39;git&#39;repository: git@github.com:用户名&#x2F;用户名.github.io.gitbranch: master 部署到网上 在cmd输入 123hexo clean hexo ghexo s 至此基本已经完成网上部署，可输入：用户名.github.io 访问你的网址了 更换主题首先选一个主题，不是很懂的话一定要慎重选择，最好是官方主题有文档的。记录自己的憨憨操作，由于不是很懂也没看到hexo的官方文档，改了两天的yilia主题，被逼无奈后选择next主题 选择主题到本地git clone 主题链接.get themes/主题名 修改站点下的_config在该文件下修改theme，大约位于上次修改的位置上一行theme: next 修改主题在网上可以找到官方文档进行修改","categories":[{"name":"学习过程","slug":"学习过程","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B/"},{"name":"新的尝试","slug":"学习过程/新的尝试","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B/%E6%96%B0%E7%9A%84%E5%B0%9D%E8%AF%95/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]}],"categories":[{"name":"学习过程","slug":"学习过程","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B/"},{"name":"知识回顾","slug":"学习过程/知识回顾","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B/%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE/"},{"name":"新的尝试","slug":"学习过程/新的尝试","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B/%E6%96%B0%E7%9A%84%E5%B0%9D%E8%AF%95/"}],"tags":[{"name":"jsp","slug":"jsp","permalink":"http://yoursite.com/tags/jsp/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]}